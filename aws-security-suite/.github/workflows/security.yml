# AWS Security Suite - Security Scanning Workflow
# Comprehensive security validation including SAST, dependency scanning, and CodeQL

name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[security]
        
    - name: Run Bandit Security Scan
      run: |
        bandit -r . -f sarif -o bandit-results.sarif --config .bandit
      continue-on-error: true
      
    - name: Upload Bandit SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit-results.sarif
        category: bandit
        
    - name: Run Semgrep SAST
      uses: semgrep/semgrep-action@v1
      with:
        config: auto
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[security]
        
    - name: Run Safety scan
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload Safety results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-results
        path: safety-report.json
        
    - name: Run pip-audit
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
        format: sarif
        output: pip-audit-results.sarif
      continue-on-error: true
      
    - name: Upload pip-audit SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: pip-audit-results.sarif
        category: pip-audit

  # CodeQL analysis for additional security insights
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config: |
          paths:
            - .
          paths-ignore:
            - tests
            - venv
            - '**/*.md'
        queries: +security-and-quality
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better secret detection
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
  # License compliance
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install .
        
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=csv --output-file=licenses.csv
        
    - name: Upload license results
      uses: actions/upload-artifact@v3
      with:
        name: license-scan-results
        path: |
          licenses.json
          licenses.csv

  # Container security (if Docker is used)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  # Only on push to save resources
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t aws-security-suite:latest .
        else
          echo "No Dockerfile found, skipping container scan"
          exit 0
        fi
        
    - name: Run Trivy vulnerability scanner
      if: hashFiles('Dockerfile') != ''
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'aws-security-suite:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy SARIF
      if: hashFiles('Dockerfile') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        category: trivy

  # Custom security validation
  custom-security-checks:
    name: Custom Security Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[security]
        
    - name: Run custom security checks
      run: |
        chmod +x security-check.sh
        ./security-check.sh
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.txt
          safety-report.json
          semgrep-report.json

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, codeql-analysis, secret-scan, license-scan, custom-security-checks]
    if: always()
    
    steps:
    - name: Generate Security Summary
      run: |
        echo "## ðŸ”’ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| SAST (Bandit/Semgrep) | ${{ needs.sast-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scanning | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| License Compliance | ${{ needs.license-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Custom Security Checks | ${{ needs.custom-security-checks.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“‹ Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review any security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
        echo "2. Check uploaded artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY
        echo "3. Address any high/critical severity issues" >> $GITHUB_STEP_SUMMARY
        echo "4. Update dependencies if vulnerabilities are found" >> $GITHUB_STEP_SUMMARY